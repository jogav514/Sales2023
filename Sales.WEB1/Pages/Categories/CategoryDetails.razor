@page "/categories/details/{CategoryId:int}"
@using Sales.WEB.Pages.SubCategories;
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

@if (category is null)
{
    <div class="spineer" />
}
else
{


    <GenericList MyList="subCategories!">
        <Body>

            <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-grid-four-up"></i> @category.Name
                        <a class="btn btn-sm btn-primary float-end" @onclick=@(() => ShowModal())><i class="oi oi-plus"></i> Adicionar Sub-Categoría</a>
                    </span>
                </div>
                <div class="card-body">
                    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                        <div>
                            <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar sub-categoría..." @bind-value="Filter" />
                        </div>
                        <div class="mx-1">
                            <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                            <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
                            <a class="btn btn-success" href="/categories/">Regresar</a>
                        </div>
                    </div>

                    <Pagination CurrentPage="currentPage"
                            TotalPages="totalPages"
                            SelectedPage="SelectedPage" />

                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Subcategoria</th>
                                <th style="width:180px"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var subcategory in subCategories!)
                            {
                                <tr>
                                    <td>
                                        @subcategory.Name
                                    </td>

                                    <td>
                                        <a class="btn btn-warning" @onclick=@(() => ShowModal(subcategory.Id, true))>Editar</a>
                                        <button class="btn btn-danger" @onclick=@(() => DeleteAsync(subcategory.Id))>Borrar</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </Body>
    </GenericList>

}

@code {
    private Category? category;
    private List<SubCategory>? subCategories;
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    public int CategoryId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    private async Task ShowModal(int id = 0, bool isEdit = false)
    {
        IModalReference modalReference;

        if (isEdit)
        {
            modalReference = Modal.Show<SubCategoryEdit>(string.Empty, new ModalParameters().Add("SubCategoryId", id));
        }
        else
        {
            modalReference = Modal.Show<SubCategoryCreate>();
        }

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }
    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }


    private async Task LoadAsync(int page = 1)
    {
        //var responseHttp = await repository.Get<State>($"/api/states/{StateId}");
        //if (responseHttp.Error)
        //{
        //    if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
        //    {
        //        navigationManager.NavigateTo("/countries");
        //        return;
        //    }

        //    var message = await responseHttp.GetErrorMessageAsync();
        //    await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
        //    return;
        //}

        //state = responseHttp.Response;

        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/subcategories?id={CategoryId}&page={page}";
            url2 = $"api/subcategories/totalPages?Id={CategoryId}";
        }
        else
        {
            url1 = $"api/subcategories?id={CategoryId}&page={page}&filter={Filter}";
            url2 = $"api/subcategories/totalPages?id={CategoryId}&filter={Filter}";
        }




        var responseHppt = await repository.Get<Category>($"api/categories/{CategoryId}");
        var responseHppt2 = await repository.Get<List<SubCategory>>(url1);
        var responseHppt3 = await repository.Get<int>(url2);
        category = responseHppt.Response;
        subCategories = responseHppt2.Response;
        totalPages = responseHppt3.Response;


    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/categories/{CategoryId}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }
    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPage(page);
    }


}
