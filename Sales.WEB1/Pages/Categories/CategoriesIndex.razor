@page "/categories"
@using System.Net;
@inject IRepository repository;
@inject NavigationManager navigationManager;
@inject SweetAlertService sweetAlertService;
@attribute [Authorize(Roles = "Admin")]

@if (Categories is null)
{
    <div class="spinner" />
}
else{

<GenericList MyList="Categories">
    <Body>

        <div class="card">
            <div class="card-header">
                <span>
                        <i class="oi oi-grid-three-up"></i> Categoría
                    <a class="btn btn-sm btn-primary float-end" href="/countries/create"><i class="oi oi-plus"></i> Nueva Categoría</a>
                </span>
            </div>
            <div class="card-body">
                <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                    <div>
                        <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar Categoría..." @bind-value="Filter" />
                    </div>
                    <div class="mx-1">
                        <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                        <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
                    </div>
                </div>

                <Pagination CurrentPage="currentPage"
                            TotalPages="totalPages"
                            SelectedPage="SelectedPageAync" />

                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th></th>
                            <th>Categoría</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var category in Categories!)
                        {
                            <tr>
                                <td>
                                    @category.Name
                                </td>
                                <th>@category.SubCategoryNumber</th>
                                <td>
                                    <a href="/categories/details/@category.Id" class="btn btn-info btn-sm"><i class="oi oi-list" /> Detalles</a>
                                    <a href="/categories/edit/@category.Id" class="btn btn-warning btn-sm"><i class="oi oi-pencil" /> Editar</a>
                                    <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(category.Id))><i class="oi oi-trash" /> Borrar</button>
                                </td>

                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </Body>
</GenericList>

}
@code {
    public List<Category>? Categories { get; set; }
    private int currentPage = 1;
    private int totalPages;
    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }
    private async Task SelectedPageAync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        //var responseHppt = await repository.Get<List<Category>>("/api/categories");
        //Categories = responseHppt.Response!;


        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/categories?page={page}";
            url2 = $"api/categories/totalPages";
        }
        else
        {
            url1 = $"api/categories?page={page}&filter={Filter}";
            url2 = $"api/categories/totalPages?filter={Filter}";
        }


        var responseHppt = await repository.Get<List<Category>>(url1);
        var responseHppt2 = await repository.Get<int>(url2);
        Categories = responseHppt.Response!;
        totalPages = responseHppt2.Response!;
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "SI"
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/categories/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            }
        }
        await LoadAsync();
    }
    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAync(page);
    }


}

